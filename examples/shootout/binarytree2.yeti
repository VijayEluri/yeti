class Node(number item, number depth)
    left  = if depth > 0 then new Node(item * 2 - 1, depth - 1) else () fi,
    right = if depth > 0 then new Node(item * 2, depth - 1) else () fi,

    number item()
        item,

    number check()
        item + if defined? left  then left#item() else 0 fi
             - if defined? right then right#item() else 0 fi
end;

out s depth check = println "\(s) of depth \(depth)\t check: \(check)";

checkDepth depth item =
    new Node(item, depth)#check() + new Node(-item, depth)#check();

minDepth = 4;
n = if empty? _argv then 2 else number _argv.[0] fi;
maxDepth = max (minDepth + 2) n;

out "stretch tree" (maxDepth + 1) new Node(0, maxDepth + 1)#check();
longLived = new Node(0, maxDepth);
var depth = minDepth;
depth <= maxDepth loop
   (iterations = 1 shl (maxDepth - depth + minDepth);
    out "\(iterations * 2)\t trees" depth
        (fold (_ v i = v + checkDepth depth i) 0 [1 .. iterations]);
    depth := depth + 2);
out "long lived tree" maxDepth longLived#check();
