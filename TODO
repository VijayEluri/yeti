   Yeti TODO.
~~~~~~~~~~~~~~~~~

* Fix f x = {x}; - type system copies to much and gets wrong type sig
* Fix code generation for case:
	case foo of
	{type, kind = Collection {ctype}} :: _: "a";
	{type} :: _: "b";
	...
	esac
	or
	f x = case x of {a = C _} :: _: 1; ... esac
* Fix structs - better comparision (with sorting) and
                restructure holding properties
* Extendable structs?
* Foreign structs
* Better error messages
* Direct double optimisation, when it can be deduced,
  that there are always floats.
* Direct struct-ref optimisation, when only known structs are accessed
* Avoid upper/lowercase dups on generated classes
