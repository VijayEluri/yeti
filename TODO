  Yeti TODO.
~~~~~~~~~~~~~~~~~

* Module type not fully defined message is confusing,
  should give more info about where error is.
* Rebuild modified dependencies when compiling: programs could be also
  built only when source is newer (has to create the ModuleType)
* Skip code generation, when only doc generation is requested
* Avoid upper/lowercase dups on generated classes
* v1.0
* Typedefs in REPL
* Foreign structs (java dto -> struct?)
* Operator to copy mutable structure fields between two different structures
* Support as in type definitions for recursive types
* Support module qualification on type, like x is foo.sometype
* Dependency analyses on struct field self-bindings?
  (could be done by binding only free typevars first and
   unifing those with actual function field types later)
  + structType should use asLambda instead of == "lambda"
* Reuse local JVM variables (have a free var list on Ctx and add variable
  to it after last use when it could be nulled). This could compact code
  and help GC with bindings that are not explicitly nulled (type != MAP).
* foo = load bar; foo.x should be optimised into same as load bar; x
* Context-specific int optimizations for builtins
  (and java method invocation return values)
* Struct mapping (as in doc/stmap.yeti)
* Allow cons pattern match (::) on arrays?
* Exhaustive list match detection probably could be improved by something
  like introducing FL_EMPTY_PATTERN and keeping account about the list tail
  being exhaustive.
* Review the Java<->Yeti type autoconversions?
* Immutable tree map support - this seems to be popular feature. ;)
* Support module field deprecation
* Optional Java generics support?
* Direct struct-ref optimisation, when only known structs are accessed
