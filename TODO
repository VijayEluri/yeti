  Yeti TODO.
~~~~~~~~~~~~~~~~~

* YetiDoc to automatically generate html documentation
  + Don't store yetidoc's in parsetree, when not generating docs
* super reference in Java classes
  (requires generating accessor methods to proxy them)
* Use typedef's in type pretty-printing (including error messages)
* Support as in type definitions for recursive types
* Rebuild modified dependencies when compiling
* Fix full path script invocation (yeti /some/fubar/script.yeti)
* Foreign structs (java dto -> struct?)
* Ensure that unit values really are null pointers
  when casted into Java object
* Don't use Object[] wrapping when function-method has only 1 captured
  variable (to be faster)
* Better error messages
  + filter out noise from deep struct-mismatch error messages
  + Module type not fully defined message is confusing,
    should give more info about where error is.
* Long strings with """ string """
* Support module qualification on type, like x is foo.sometype
* Dependency analyses on struct field self-bindings?
  (could be done by binding only free typevars first and
   unifing those with actual function field types later)
* Allow cons pattern match (::) on arrays?
* Review the Java<->Yeti type autoconversions?
* Avoid upper/lowercase dups on generated classes
* Optional Java generics support?
* Immutable tree map support - this seems to be popular feature. ;)
* Hidden types in modules?
* Direct double optimisation, when it can be deduced,
  that there are always floats
* Direct struct-ref optimisation, when only known structs are accessed
