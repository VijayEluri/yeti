  Yeti TODO.
~~~~~~~~~~~~~~~~~

* YetiDoc to automatically generate html documentation
  + Don't store yetidoc's in parsetree, when not generating docs
* Support as in type definitions for recursive types
* Rebuild modified dependencies when compiling
* Fix full path script invocation (yeti /some/fubar/script.yeti)
  + Use unique path identifiers (File? URL?) on module (re)compilation.
  + Fix the circular dependency checking (TODO in CompileCtx.compile()).
* Compile modules required by load directly after parse, before type analyse
* Foreign structs (java dto -> struct?)
* Better error messages
  + filter out noise from deep struct-mismatch error messages
  + Module type not fully defined message is confusing,
    should give more info about where error is.
* Support module qualification on type, like x is foo.sometype
* Typedefs in REPL
* Dependency analyses on struct field self-bindings?
  (could be done by binding only free typevars first and
   unifing those with actual function field types later)
* Allow cons pattern match (::) on arrays?
* Review the Java<->Yeti type autoconversions?
* Avoid upper/lowercase dups on generated classes
* typedef opaque fobar<> = t and support using as to cast t to fobar<>
  (in the scope of the typedef), to allow hiding implementation types.
  It should allocate new type code and associate t with it in the scope.
* Immutable tree map support - this seems to be popular feature. ;)
* Optional Java generics support?
* Direct double optimisation, when it can be deduced,
  that there are always floats
* Direct struct-ref optimisation, when only known structs are accessed
