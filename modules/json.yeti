/// Yeti JSON library.
///
/// EXPERIMENTAL - if this module stays, then it will change name.

/*
 * Copyright (c) 2013 Madis Janson
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
module yeti.experimental.json;

import yeti.lang.Core;

typedef json_value'<json> = 
    Null () | Boolean boolean | Number number |
    String string | List list<json_value'> | Object hash<string, json>

typedef json = {
    str is string,
    list is list<json>,
    obj is hash<string, json>,
    num  is number,
    bool is boolean,
    value is json_value'<json>
}

typedef json_value = json_value'<json>

json value is json_value -> json = {
    get value () = value,
    get str () =
        case value of
        String s: s;
        _: failWith "str of \(value)";
        esac,
    get obj () =
        case value of
        Object m: m;
        _: failWith "obj of \(value)";
        esac,
    get list () =
        case value of
        List l: map json l; // lazy mapping
        _: failWith "list of \(value)";
        esac,
    get num () =
        case value of
        Number n: n;
        _: failWith "num of \(value)";
        esac,
    get bool () =
        case value of
        Boolean v: v;
        _: failWith "bool of \(value)";
        esac,
};

jsonStr  = json . String;
jsonNum  = json . Number;
jsonBool = json . Boolean;
jsonList' = json . List;
jsonList = jsonList' . map (.value);
jsonObj  = json . Object;
jsonNull = json (Null ());

jsonParse str is string -> json =
   (invalid = failWith . ("Invalid JSON: " ^);
    var tokens = matchAll ('\s+|([{:,}\[\]]|"(?:[^\\"]|\["\\/bfnrtu])*"|' ^
                          '-?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?|null|true|false)')
                          (`at` 0) invalid str;
    fetch () =
        case tokens of
        s :: rest:
            tokens := rest;
            case s of
            '': fetch ();
            '{':
                m = [:];
                empty? tokens or head tokens != '}' loop
                   (key = case fetch () of
                          String key: key;
                          v: failWith "Invalid JSON field name (\(v))";
                          esac;
                    case tokens of
                    ':' :: r: tokens := r;
                    _: failWith "JSON expecting : after object field name";
                    esac;
                    m[key] := json (fetch ());
                    case head tokens of
                    ',': tokens := tail tokens;
                    '}': ();
                    x: invalid x;
                    esac);
                tokens := tail tokens;
                Object m;
            '[':
                a = array [];
                empty? tokens or head tokens != ']' loop
                    (push a (fetch ());
                     case head tokens of
                     ',': tokens := tail tokens;
                     ']': ();
                     x: invalid x;
                     esac);
                tokens := tail tokens;
                List (list a);
            'true' : Boolean true;
            'false': Boolean false;
            'null' : Null ();
            _:  if strStarts? s '"' then
                    escape m =
                        case m[1] of
                        'n': "\n";
                        't': "\t";
                        'r': "\r";
                        'b': "\b";
                        'f': "\f";
                        s : if strLength s <= 1 then
                                s
                            else
                                x = new int[1];
                                x[0] := Integer#parseInt(strRight s 1, 16);
                                new String(x, 0, 1) unsafely_as string
                            fi
                        esac;
                    matchAll '\\(["\\/bfnrt]|u[0-9a-fA-F]{4})' escape id
                        (strSlice s 1 (strLength s - 1)) |> strJoin '' |> String
                else
                    Number (number s)
                fi
            esac;
        _: failWith "Unexpected end of JSON data"
        esac;
    res = fetch ();
    if not empty? tokens then
        failWith "Garbage after JSON data (\(head tokens))"
    fi;
    json res);

jsonEncode is json_value -> string =
   \case of
    String s: Core#show(s);
    Number n: "\(n)";
    Object m: "{\(mapHash (_ k v = "\(Core#show(k)):\(jsonEncode v.value)") m
                    |> strJoin ',')}";
    List l: "[\(map jsonEncode l |> strJoin ',')]";
    Boolean b: "\(b)";
    Null (): "null";
    esac;

jsonEncode is json -> string = jsonEncode . (.value);

{ json, jsonStr, jsonNum, jsonBool, jsonList', jsonList, jsonObj,
  jsonNull, jsonParse, jsonEncode }
