load yeti.lang.compiler.showtype;

doc_dir = _argv.[0];

(@) = strReplace '<' '&lt;' . strReplace '>' '&gt;' . strReplace '&' '&amp;';

html_page name doc descr = """<html>
<head><title>Module \(name@)</title></head>
<body>
<h1>\(name@)</h1>
\(substAll "\n[ \\t]*\n" "\n<p>" (doc@))
<div class="type">
\(descr)
</div>
</body>
</html>""";

type_as_html st =
   (var cur = '';
    do indent t:
        old = cur;
        s = case t of
            Struct _:
                cur := 'struct';
                "<div class=\"struct\">\(st indent t)</div>";
            Variant _:
                cur := 'variant';
                "<div class=\"variant\">\(st indent t)</div>";
            _:
                if cur != '' then
                    cur := '';
                    "<div class=\"other\">\(st indent t)</div>"
                else
                    st indent t
                fi
            esac;
        cur := old;
        s
    done);

format_doc _ doc =
    if doc =~ '\S' then
        "<div class=\"doc\">\(strReplace "\n\n" "<p>" (doc@))</div>"
    else
        undef_str
    fi;

do {type, name, doc}:
    if defined? doc_dir then
        var stf _ _ = '';
        to_html = type_as_html (_ i = stf i);
        stf := showType [/*Indent '&nbsp; &nbsp;',*/ CommentDoc (),
                         ShowType to_html, FormatDoc format_doc];
        descr = to_html '' type;
        //descr = strReplace "\n" "<br>\n" descr;
        page = html_page name doc descr;
        writeFile "\(doc_dir)/\(name).html" 'utf-8' do f:
            f.writeln page
        done
    else
        if doc != "" then
            println "/*\n\(doc)\n*/"
        fi;
        println "module \(name);\n\(showType [CommentDoc ()] '' type)"
    fi
done
