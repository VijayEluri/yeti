load yeti.lang.compiler.showtype;

doc_dir = _argv.[0];

formatType template =
   (var cur = '';
    var big = false;
    var depth = 0;
    var st _ _ = '';
    leftArrow = template.escape '<';
    rightArrow = template.escape '>';

    format indent t =
       (old = cur;
        depth := depth + 1;

        dataType l what =
           (types = [:];
            var flag = false;
            for l do {name, type}:
                big := false;
                types.[name] := format indent type;
                flag := flag or big
            done;
            docs = not empty? (find ((!= '') . (.description)) l);
            big := docs or flag or length l >= 3;
            cur := what;
            fieldDesc f =
                f is typeitem<type> with { typeStr = types.[f.name] };
            { big, docs, fields = array (map fieldDesc l), top = depth == 1 });

        other s =
            if cur != '' then
                cur := '';
                template.other s
            else
                s
            fi;

        s = case t of
            Struct  l: template.struct (dataType l 'struct');
            Variant l: template.variant (dataType l 'variant');

            Function l:
                var flag = false;
                fields = array [];
                for l do type:
                    big := false;
                    push fields (format indent type);
                    case type of
                    Function f: push fields "(\(pop fields))";
                    _: ();
                    esac;
                    flag := flag or big
                done;
                big := flag or length fields > 4;
                template.function {big, docs = false, fields, top = depth == 1};
     
            Parametric {type, params}:
                res = strJoin ', ' (map (format indent) params);
                other (type ^ leftArrow ^ res ^ rightArrow);
            _:
                other (st indent t);
            esac;
        depth := depth - 1;
        cur := old;
        s);

    st := showType (ShowType format :: template.options);
    format);

(@) = strReplace '<' '&lt;' . strReplace '>' '&gt;' . strReplace '&' '&amp;';

formatDoc _ doc =
    if doc =~ '\S' then
        esc = strReplace "\n" "<br>" . substAll "\n[ \\t]*\n" "<p>";
        "<div class=\"doc\">\(esc (doc@))</div>"
    fi;

html_page {name, doc, descr, typedefs} =
"""<html><style type="text/css">
.main { background: white; line-height: 130% }
.type { background: white }
.other { background: #cccccc }
.field { padding: 1.5pt }
.wdoc { padding-top: 0.5em; padding-bottom: 0.4em; }
//.wdoc { margin-top: 0.6em; margin-bottom: 0.6em; }
.function {
          background: #ffffff;
          border-width: 1px;
          border-color: black; border-style: solid;
          padding-left: 0.1em;
          padding-right: 0.1em;
          margin-left: 1pt;
          margin-right: 1pt;
          padding-top: 1px;
          padding-bottom: 1pt;
          margin-top: 1px;
          margin-bottom: 0pt;
          display: inline-block; }
.struct { //background: #bbffbb;
          background: #ffffff;
          border-width: 1px;
          border-color: black; border-style: solid;
          padding-left: 0.1em;
          padding-right: 0.1em;
          margin-left: 1pt;
          margin-right: 1pt;
          padding-top: 1px;
          padding-bottom: 1pt;
          margin-top: 1px;
          margin-bottom: 0pt;
          display: inline-block; }
.variant { background: #c7c7ff; border-width: 1px;
          border-color: black; border-style: solid;
          padding-left: 0.1em;
          padding-right: 0.1em;
          margin-left: 1pt;
          margin-right: 1pt;
          padding-top: 1px;
          padding-bottom: 1pt;
          margin-top: 1px;
          margin-bottom: 0pt;
          display: inline-block; }
.doc { background: #ffffc5;
       padding-left: 2.5em;
       padding-top: 0.5em;
       padding-bottom: 0.5em;
       padding-right: 0.5em; }
</style><title>\(name@)</title>
<body>
<p class="main">
<h2>module \(name@)</h2>
\(formatDoc () doc)
<hr>
\(typedefs)
<h3>Module signature</h3>
<div class="type">
\(descr)
</div>
</body>
</html>""";

complexType what before sep after f {big, docs, top, fields} =
   (last = pop fields;
    var fields = map (f sep) fields ++ [f '' last];
    if big then
        block = if top then ' style="display: block; margin: 2pt"' fi;
        style = if docs then '"field wdoc"' else 'field' fi;
        fields := "<div class=\"\(what)\"\(block)>" :: 
            map (_ s = "<div class=\(style)>\(s)</div>") fields ++ ["</div>"]
    fi;
    strJoin '' (before :: fields ++ [after]));

to_html = formatType {
    struct = complexType 'struct' '{' ', ' '}' do sep f:
        strJoin '' [
            if f.mutable then '<strong>var</strong> ' fi,
            f.tag, f.name, ' <strong>is</strong> ',
            f.typeStr, sep,
            if f.description != '' then formatDoc '' f.description fi
        ]
    done,
    variant = complexType 'variant' ' ' ' | ' ' ' do sep m:
        "\(m.name) \(m.typeStr)\(sep)"
    done,
    function = complexType 'function' '' ' &rarr; ' ''
                           (_ sep t = "\(t) \(sep)"),
    other descr = "<span class=\"other\">\(descr)</span>",
    escape s =
        case s of
        '<': '&lang;';
        '>': '&rang;';
        _: (@) s;
        esac,
    options = [FormatDoc formatDoc]
};

typedef_param param =
    if not empty? param then "<\(strJoin ', ' param)>" fi;

typedef_html {name, type, param} =
"""<div class="typedef">
<b>typedef</b> \(name@)\(typedef_param param@) = <span class="type">
\(to_html '' type)</span></div><p>""";

do {type, name, doc, typedefs}:
    descr = to_html '' type;
    page = html_page {
        name, doc, descr,
        typedefs = strJoin '' (map typedef_html typedefs)
    };
    writeFile "\(doc_dir)/\(name).html" 'utf-8' (`putLines` [page])
done
