module yeti.lang.compiler.repl;

import java.lang.Class;
import java.lang.ClassLoader;
import yeti.lang.Core;
import java.security.Permission;
import java.io.File;

do argv: {
    var preload = ["yeti/lang/std", "yeti/lang/io"],
    var mainClass = "code",
    var classPath = [],
    var sandbox = false,
    var gcj = false,
    var noframes = false,

    compilationOf writer =
        ctx = new CompileCtx(new YetiC(()), writer, preload,
                             new ClassFinder(classPath as ~String[]));
        if gcj then
            ctx#isGCJ := true
        fi;
        if noframes then
            ctx#classWriterFlags := 0
        fi;
        ctx,

    getTrace ex is ~java.lang.Throwable -> string =
        sw = new java.io.StringWriter();
        ex#printStackTrace(new java.io.PrintWriter(sw));
        sw#toString(),

    execClass eval writer =
        c = Class#forName(strReplace '/' '.' mainClass, true, writer);
        try
            if eval then
                f = c#newInstance() unsafely_as () -> 'a;
                if sandbox then
                    var sandboxed = \();
                    class Sandbox extends java.lang.SecurityManager
                        void checkPermission(Permission perm)
                            sandboxed (),
                        void checkPermission(Permission perm, Object context)
                            sandboxed (),
                        void checkExit(int status)
                            ()
                    end;
                    System#setSecurityManager(new Sandbox());
                    // can't activate before, because
                    // setSecurityManager would fail otherwise
                    sandboxed := \throw new java.lang.SecurityException();
                fi;
                f ()
            else
                c#getMethod("main", [classOf String[]])
                 #invoke((), [argv is array<string> as ~java.lang.String[]]
                                as ~java.lang.String[][])
            fi
        catch java.lang.reflect.InvocationTargetException ex:
            t = ex#getCause();
            throw if defined? t then t else ex fi;
        yrt,

    evaluate line flags =
        writer = new Loader();
        res = array [];
        try
            bindings = YetiEval#get()#bindings;
            bindBarrier = bindings#size();
            compilation = compilationOf writer;
            type_ = compilation#compile((), mainClass, line is string, flags +
                                            YetiC#CF_EVAL + YetiC#CF_EVAL_BIND);
            compilation#write();
            try
                val = execClass true writer;
                if type_#deref()#type != YetiType#UNIT then
                    push res "\(Core#show(val)) is \(type_)"
                fi
            catch Exception ex:
                push res (getTrace ex)
            catch java.lang.StackOverflowError ex:
                push res (getTrace ex)
            yrt;
            for [bindBarrier .. bindings#size() - 1] do i:
                binding = bindings#get(i) unsafely_as ~YetiEval$Binding;
                if not binding#isImport then
                    t = binding#type;
                    push res "\(if binding#mutable then "var " else "" fi)\
                             "\(binding#name) is \(t) = \
                             "\(if t#deref()#type == YetiType#UNIT then
                                    "()"
                                else
                                    Core#show(binding#val())
                                fi)"
                fi
            done
        catch CompileException ex:
            push res ex#getMessage()
        yrt;
        strJoin '' (map (^ "\n") res),

    compileToFiles sources target printMessage
            is list?<string> -> string -> (~CompileException -> ()) -> boolean =
        target = if target == "" then "" else target ^ File#separator fi;
        compilation = compilationOf new ToFile(target);
        try
            for sources do src:
                mainClass := compilation#compile(src, 0)
            done;
            compilation#write();
            compilation#enumWarns(printMessage);
            true
        catch CompileException ex:
            compilation#enumWarns(printMessage);
            printMessage ex;
            false
        yrt
} done
